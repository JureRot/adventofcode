set b 93
set c b
jnz a 2
jnz 1 5
mul b 100
sub b -100000
set c b
sub c -17000
set f 1
set d 2
set e 2
set g d
mul g e
sub g b
jnz g 2
set f 0
sub e -1
set g e
sub g b
jnz g -8
sub d -1
set g d
sub g b
jnz g -13
jnz f 2
sub h -1
set g b
sub g c
jnz g 2
jnz 1 3
sub b -17
jnz 1 -23

this is our input (represents a program run with assembly commands)
first we will translate it into something more "code like language" (here we use javascript)
thus we will be able to see the loops more easily and optimise it
set, sub and mul commands are pretty straight forward
but jnz commands can become one of two things
if statement (jnz x 2) (jumps over next command if x not zero)
do while loop (jnz x -8) (goes back to the beginning of the loop if x not zero)


var a=1, b, c, d, e, f, g, h=0;

#set b 93				--
b = 93;					  \
#set c b				   |
c = b;					   |
#jnz a 2 				   |
#jnz 1 5 #skiped, a is set to 1		    \
#mul b 100				     --	this is all initiation (will be exectude just once)
b = b*100;				    /
#sub b -100000				   |
b = b+100000;				   |
#set c b				   |
c = b;					   |
#sub c -17000				  /
c = c+17000;				--

#same as saying
b = 109300;
c = 126300;

do {
	#set f 1
	f = 1;
	#set d 2
	d = 2;
	do {
		#set e 2
		e = 2;
		do {
			#set g d
			g = d;
			#mul g e
			g = g*e;
			#sub g b
			g = g-b;
			#jnz g 2
			#if (g != 0) { jump over next instruction (do not execute it) }
			#same as
			if (g == 0) { execute next instruction
				#set f 0
				f = 0;
			}
			#sub e -1
			e = e+1;
			#set g e
			g = e;
			#sub g b
			g = g-b;
		#jnz g -8
		} while (g != 0);
		#sub d -1
		d = d+1;
		#set g d
		g = d;
		#sub g b
		g = g-b;
	#jnz g -13
	} while (g != 0);
	#jnz f 2
	if (f == 0) { #same as above with g
		#sub h -1	
		h = h+1;
	}
	#set g b
	g = b;
	#sub g c
	g = g-c;
	#jnz g 2
	if (g == 0) { #same as above with f and g
		#jnz 1 3
		break
	}
	#sub b -17
	b = b+17;
#jnz 1 -23
} while (true);

#same but concise
var a=1, b, c, d, e, f, g, h=0;

b = 109300;
c = 126300;

do {
	f = true; #f can only be 0 or 1, so we use logical
	d = 2;
	do {
		e = 2;
		do {
			g = d;
			g = g*e;
			g = g-b;
			if (g == 0) {
				f = false;
			}
			e = e+1;
			g = e;
			g = g-b;
		} while (g != 0);
		d = d+1;
		g = d;
		g = g-b;
	} while (g != 0);
	if (!f) {	
		h = h+1;
	}
	g = b;
	g = g-c;
	if (g == 0) {
		break
	}
	b = b+17;
} while (true);


#cleaning the code (eliminate g, because it is only a temp value used everywhere)
var a=1, b, c, d, e, f, g, h=0;

b = 109300;
c = 126300;

do {
	f = true;
	d = 2;
	do { #d=2, d<b, d++
		e = 2;
		do { #e=2, e<b, e++
			if ((d*e) == b) { #if b has devisors (is not prime), set f to false
				f = false;
			}
			e = e+1;
		} while (e != b);
		d = d+1;
	} while (d != b);
	if (!f) { #if f false (b is not prime), we increment h
		h = h+1;
	}
	if (b == c) {
		break
	}
	b = b+17;
} while (true);

this program counts how many non-primes are there between b and c with step 17

#this program does the same thing
var a=1, b, c, d, e, f, g, h=0;

b = 109300;
c = 126300;

do {
	f = true;
	for (d=2; d<b; d++) {
		if (b%d == 0) {
			f = false;
			break;
		}
	}
	if (!f) {
		h++;
	}
	if (b == c) {
		break;
	}
	b = b+17;
} while (true)


inspiration and help [https://youtube.com/watch?v=AqXTZo6o34s]