dist
input <- 347991
input <- 12
# one right, one up
# two left, two down
# thre right, thee up
# four left, four down
# ...
x <- 0 #horizontal
y <- 0 #vertical
i <- 1
n <- 1
smaller <- TRUE
distance <- 0
while (smaller) {
if (i == input) {
smaller <- FALSE
break
}
#right
for (j in 1:n) {
x <- x + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break #break for loop if come to the end
}
}
if (!smaller) break #break while loop if coem to the end
#up
for (j in 1:n) {
y <- y + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
}
}
if (!smaller) break
n <- n + 1 #increase the step
#left
for (j in 1:n) {
x <- x - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
#down
for (j in 1:n) {
y <- y-  1
i <- i + 1
if (i == input) {
smaller <- FALSE
}
}
n <- n + 1 #increase the step (for new iteration)
}
x
y
dist <- abs(x) + abs(y)
dist
input <- 347991
input <- 23
# one right, one up
# two left, two down
# thre right, thee up
# four left, four down
# ...
x <- 0 #horizontal
y <- 0 #vertical
i <- 1
n <- 1
smaller <- TRUE
distance <- 0
while (smaller) {
if (i == input) {
smaller <- FALSE
break
}
#right
for (j in 1:n) {
x <- x + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break #break for loop if come to the end
}
}
if (!smaller) break #break while loop if coem to the end
#up
for (j in 1:n) {
y <- y + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
}
}
if (!smaller) break
n <- n + 1 #increase the step
#left
for (j in 1:n) {
x <- x - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
#down
for (j in 1:n) {
y <- y - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
}
}
n <- n + 1 #increase the step (for new iteration)
}
x
y
dist <- abs(x) + abs(y)
dist
input <- 347991
input <- 23
# one right, one up
# two left, two down
# thre right, thee up
# four left, four down
# ...
x <- 0 #horizontal
y <- 0 #vertical
i <- 1
n <- 1
smaller <- TRUE
distance <- 0
while (smaller) {
if (i == input) {
smaller <- FALSE
break
}
#right
for (j in 1:n) {
x <- x + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break #break for loop if come to the end
}
}
if (!smaller) break #break while loop if coem to the end
#up
for (j in 1:n) {
y <- y + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
n <- n + 1 #increase the step
#left
for (j in 1:n) {
x <- x - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
#down
for (j in 1:n) {
y <- y - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
n <- n + 1 #increase the step (for new iteration)
}
x
y
dist <- abs(x) + abs(y)
dist
input <- 347991
input <- 12
# one right, one up
# two left, two down
# thre right, thee up
# four left, four down
# ...
x <- 0 #horizontal
y <- 0 #vertical
i <- 1
n <- 1
smaller <- TRUE
distance <- 0
while (smaller) {
if (i == input) {
smaller <- FALSE
break
}
#right
for (j in 1:n) {
x <- x + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break #break for loop if come to the end
}
}
if (!smaller) break #break while loop if coem to the end
#up
for (j in 1:n) {
y <- y + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
n <- n + 1 #increase the step
#left
for (j in 1:n) {
x <- x - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
#down
for (j in 1:n) {
y <- y - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
n <- n + 1 #increase the step (for new iteration)
}
x
y
dist <- abs(x) + abs(y)
dist
input <- 347991
input <- 1024
# one right, one up
# two left, two down
# thre right, thee up
# four left, four down
# ...
x <- 0 #horizontal
y <- 0 #vertical
i <- 1
n <- 1
smaller <- TRUE
distance <- 0
while (smaller) {
if (i == input) {
smaller <- FALSE
break
}
#right
for (j in 1:n) {
x <- x + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break #break for loop if come to the end
}
}
if (!smaller) break #break while loop if coem to the end
#up
for (j in 1:n) {
y <- y + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
n <- n + 1 #increase the step
#left
for (j in 1:n) {
x <- x - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
#down
for (j in 1:n) {
y <- y - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
n <- n + 1 #increase the step (for new iteration)
}
x
y
dist <- abs(x) + abs(y)
dist
input <- 347991
# one right, one up
# two left, two down
# thre right, thee up
# four left, four down
# ...
x <- 0 #horizontal
y <- 0 #vertical
i <- 1
n <- 1
smaller <- TRUE
distance <- 0
while (smaller) {
if (i == input) {
smaller <- FALSE
break
}
#right
for (j in 1:n) {
x <- x + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break #break for loop if come to the end
}
}
if (!smaller) break #break while loop if coem to the end
#up
for (j in 1:n) {
y <- y + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
n <- n + 1 #increase the step
#left
for (j in 1:n) {
x <- x - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
#down
for (j in 1:n) {
y <- y - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
n <- n + 1 #increase the step (for new iteration)
}
x
y
dist <- abs(x) + abs(y)
dist
input <- 347991
# one right, one up
# two left, two down
# thre right, thee up
# four left, four down
# ...
x <- 0 #horizontal
y <- 0 #vertical
i <- 1
n <- 1
smaller <- TRUE
distance <- 0
while (smaller) {
if (i == input) { #if input 1
smaller <- FALSE
break
}
#right
for (j in 1:n) {
x <- x + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break #break for loop if come to the end
}
}
if (!smaller) break #break while loop if coem to the end
#up
for (j in 1:n) {
y <- y + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
n <- n + 1 #increase the step
#left
for (j in 1:n) {
x <- x - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
#down
for (j in 1:n) {
y <- y - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
n <- n + 1 #increase the step (for new iteration)
}
x
y
dist <- abs(x) + abs(y)
dist
input <- 347991
# one right, one up
# two left, two down
# thre right, thee up
# four left, four down
# ...
x <- 0 #horizontal
y <- 0 #vertical
i <- 1
n <- 1
smaller <- TRUE
distance <- 0
while (smaller) {
if (i == input) { #if input 1
smaller <- FALSE
break
}
#right
for (j in 1:n) {
x <- x + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break #break for loop if come to the end
}
}
if (!smaller) break #break while loop if coem to the end
#up
for (j in 1:n) {
y <- y + 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
n <- n + 1 #increase the step
#left
for (j in 1:n) {
x <- x - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
if (!smaller) break
#down
for (j in 1:n) {
y <- y - 1
i <- i + 1
if (i == input) {
smaller <- FALSE
break
}
}
n <- n + 1 #increase the step (for new iteration)
}
dist <- abs(x) + abs(y)
dist
bla <- 1
bla <- c(bla, 2)
bla
bla[1]
bla[2]
bla <- c(bla, 0.3)
bla
bla[3]
